{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["numRows","numCols","numPix","cellColor","bgColor","borderColor","cellW","cellH","count","time","operations","App","useState","rows","i","push","Array","from","grid","setGrid","running","setRunning","runningRef","useRef","current","generateEmptyGrid","runSimulation","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","onClick","Math","random","style","display","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e321b51.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\r\nimport produce from 'immer';\r\nimport './App.css';\r\n\r\nlet numRows = 25; // setting initial values for these varibables we'll update later\r\nlet numCols = 25;\r\nlet numPix = 25;\r\nlet cellColor = 'gray';\r\nlet bgColor = 'white';\r\nlet borderColor = 'black';\r\nlet cellW = 25;\r\nlet cellH = 25;\r\nlet count = 0;\r\nlet time = 200;\r\n\r\nconst operations = [\r\n  [0, 1],\r\n  [0, -1],\r\n  [1, -1],\r\n  [-1, 1],\r\n  [1, 1],\r\n  [-1, -1],\r\n  [1, 0],\r\n  [-1, 0],\r\n]\r\n\r\n\r\nfunction App() {\r\n  const [grid, setGrid] = useState(() => {\r\n    const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => 0));\r\n    }\r\n\r\n    return rows;\r\n  });\r\n\r\n  // console.log(grid);\r\n\r\n  \r\nconst [running, setRunning] = useState(false);\r\n\r\nconst runningRef = useRef();\r\nrunningRef.current = running // the current value of Ref is whatever the value of running is\r\n\r\nconst generateEmptyGrid = () => {\r\n  const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => 0));\r\n    }\r\n    count = 0;\r\n    return rows;\r\n}\r\n\r\nconst runSimulation = useCallback (() => {\r\n  if (!runningRef.current) {\r\n    return;\r\n  }\r\n  // simulate \r\n  // somekindof set state logic to sim the update\r\n  setGrid((g) => {\r\n    return produce(g, gridCopy => { // produce will update the grid when I change gridCopy\r\n      for (let i = 0; i < numRows; i++) {\r\n        for (let j = 0; j < numCols; j++) { // go through every cell in the grid\r\n          let neighbors = 0; // check neighbors\r\n          operations.forEach(([x, y]) => { // check if out of bounds\r\n            const newI = i + x;\r\n            const newJ = j + y;\r\n            if (newI >= 0 && newI < numRows && newJ >= 0 && newJ <  numCols) {\r\n              neighbors+= g[newI][newJ]\r\n            }\r\n          });\r\n            // once we check neighbors, determine what happens\r\n          if (neighbors < 2 || neighbors > 3) { // dying\r\n            gridCopy[i][j] = 0\r\n          } else if (g[i][j] === 0 && neighbors === 3) { //being born \r\n            gridCopy[i][j] = 1;\r\n          }\r\n        }\r\n      }\r\n    })\r\n  })\r\n\r\n  // then call ourselves again in 2nd parameter time\r\n  setTimeout(runSimulation, time)\r\n  count++\r\n}, [])\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n    <button onClick={() =>{\r\n      setRunning(!running);\r\n      if (!running) {\r\n      runningRef.current = true;\r\n      count = 0;\r\n      runSimulation();\r\n    } \r\n    }}\r\n    >{ running ? 'stop' : 'start'}\r\n    </button>\r\n    <button onClick={() => {\r\n    const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => (Math.random() > 0.8 ? 1 : 0)));\r\n      count = 0;\r\n    }\r\n\r\n    setGrid(rows);\r\n    }}>\r\n      20% seed\r\n    </button>\r\n    <button onClick={() => {\r\n    const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => (Math.random() > 0.6 ? 1 : 0)));\r\n      count = 0;\r\n    }\r\n\r\n    setGrid(rows);\r\n    }}>\r\n      40% seed\r\n    </button>\r\n    <button onClick={() => {\r\n    const rows = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      rows.push(Array.from(Array(numCols), () => (Math.random() > 0.3 ? 1 : 0)));\r\n    }\r\n\r\n    setGrid(rows);\r\n    }}>\r\n      70% seed\r\n    </button>\r\n    <button onClick={( ) => {\r\n      numRows = 25;\r\n      numCols = 25;\r\n      numPix = 25;\r\n      cellColor = 'gray';\r\n      bgColor = 'white';\r\n      borderColor = 'black';\r\n      cellW = 25;\r\n      cellH = 25;\r\n      count = 0;\r\n      time = 200;\r\n      setGrid(generateEmptyGrid());\r\n    }}>\r\n      RESET\r\n    </button>\r\n\r\n    <button onClick={( ) => {\r\n      numRows = 50;\r\n      numCols = 50;\r\n      setGrid(generateEmptyGrid());\r\n    }}>\r\n      50x50\r\n    </button>\r\n\r\n    <button onClick={( ) => {\r\n      numRows = 29;\r\n      numCols = 64;\r\n      setGrid(generateEmptyGrid());\r\n    }}>\r\n      widescreen\r\n    </button>\r\n\r\n    <button onClick={( ) => {\r\n      numRows++;\r\n      setGrid(generateEmptyGrid());\r\n    }}>\r\n      +row\r\n    </button>\r\n\r\n    <button onClick={( ) => {\r\n      numCols++;\r\n      setGrid(generateEmptyGrid());\r\n    }}>\r\n      +collum\r\n    </button>\r\n\r\n    <button onClick={( ) => {\r\n      numRows++;\r\n      numCols++;\r\n      setGrid(generateEmptyGrid());\r\n    }}>\r\n      +both\r\n    </button>\r\n\r\n    <button onClick={( ) => {\r\n      cellW++;\r\n      cellH++;\r\n      numPix = cellW\r\n      setGrid(generateEmptyGrid());\r\n    }}>\r\n      bigger cells\r\n    </button>\r\n\r\n    <button onClick={( ) => {\r\n      cellW--;\r\n      cellH--;\r\n      numPix = cellW\r\n      setGrid(generateEmptyGrid());\r\n    }}>\r\n      smaller cells\r\n    </button>\r\n\r\n    <button onClick={( ) => {\r\n       numPix++;\r\n      setGrid(generateEmptyGrid());\r\n    }}> \r\n          add width space?\r\n    </button>   \r\n    \r\n    <button onClick={( ) => {\r\n      time = 50;\r\n      setGrid(generateEmptyGrid());\r\n   }}>\r\n     fast speed\r\n   </button>\r\n\r\n   <button onClick={( ) => {\r\n      time = 500;\r\n      setGrid(generateEmptyGrid());\r\n   }}>\r\n     slow speed\r\n   </button>\r\n\r\n\r\n    <button onClick={( ) => {\r\n      if (bgColor === 'white')\r\n      bgColor = 'gray';\r\n       else bgColor = 'white';\r\n       if (borderColor === 'black')\r\n       borderColor = 'white';\r\n        else borderColor = 'black';\r\n      if (cellColor === 'gray')\r\n      cellColor = 'black';\r\n         else cellColor = 'gray';\r\n      setGrid(generateEmptyGrid());\r\n    }}>\r\n      { bgColor === 'white' ? 'darkmode' : 'lightmode'}\r\n    </button>\r\n\r\n    <button onClick={() => {\r\n    setGrid(generateEmptyGrid());\r\n    }}>\r\n      clear cells\r\n    </button>\r\n    <div \r\n    style ={{\r\n      display: 'grid',\r\n      gridTemplateColumns: `repeat(${numCols}, ${numPix}px)`\r\n    }}\r\n    > \r\n      {grid.map((rows, i) => \r\n        rows.map((col, j) => \r\n          <div \r\n            key={`${i}-${j}`}\r\n            onClick={() => { \r\n              // in order to change the state without making it mutable, I'm using immer 'produce function\r\n              const newGrid = produce(grid, gridCopy => { \r\n                // immer will make this a mutable change and generate a new grid\r\n                gridCopy[i][j] = grid[i][j] ? 0 : 1; // toggle dead/alive\r\n              });\r\n              setGrid(newGrid)\r\n              // console.log('test')\r\n            }}\r\n              style={{\r\n                width: cellW, \r\n                height: cellH, \r\n                backgroundColor: grid[i][j] ? `${cellColor}` : `${bgColor}`, // set gray to undefined for default\r\n                border: `solid 1px ${borderColor}`\r\n            }} \r\n          />\r\n        ))\r\n      }\r\n    </div>\r\n    <h1>generation:{count}</h1>\r\n    <h2> About Conway's Game of Life</h2>\r\n    <p>The Game of Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves. It is Turing complete and can simulate a universal constructor or any other Turing machine.</p>\r\n    <p>A cell is born if</p>\r\n    <ol>There are 3 live neighbours next to it</ol>\r\n    <p>A cell dies if</p>\r\n    <ol>It has fewer than 2 live neighbours to underpopulation, or more than 3 live neighbors to overpopulation</ol>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}